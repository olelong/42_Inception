	  		   --- LES CONSEILS DE WAEL ---


						STEP 1:

1. Commencer par le container wordpress.
Pour le moment juste faire le dockerfile et pouvoir faire 
localhost:8080(ou autre port)
et arriver sur la page de wordpress.
Installer, configurer, lancer.
Ne pas lancer wordpress en premier plan avec daemon off.

Pas utilise de tail -f, boucle infinie.
Donc utilise php-fpm pour faire lancer php-fpm en 
premier plan.
Mode one process ou daemon off = process qui tourne en 
premier plan.

Pour le moment juste dockerfile donc pas de COPY.
RUN installer.
RUN configurer : telecharger et installer au bon endroit 
les fichiers du site de wordpress pas le mien.
CMD lancer. Lancer en premier plan php-fpm.


Docker ps -q  : -q Affiche que les id et ps demandé d’afficher tout les conteneurs actifs 
Docker ps -aq  : afficher tous les id de tous les conteneurs actifs ou non (-q : affiche id, -a: tous les conteneurs existant) 
Docker stop $(docker ps -q)  : arrêter les conteneurs actifs via leurs id 
Docker rm $(docker ps -aq)  : supprimer tous les conteneurs restant

Les volumes sont dans la machine comme ce fichier /etc/host.

/etc/hosts -> Modifier pour rajouter en localhost olelong.42.fr
Voir pour faire fonctionner ca mais dans nginx.


- Dois je creer le dossier moi meme dans ma machine au prealable? /var/www/.. 
- Les dossiers sont dans le conteneur donc rien ne se passe dans la machine tout est dans les conteneurs
donc utiliser la commande run -it id pour acceder au terminal de ce conteneur.
- Normal qu'il y'ai rien dans le docker ps apres le run? oui car a fait ce qu'il y avait a faire puis s est arrete.
Voir ca avec la commande docker ps -a.
- Erreur rm images ? Oui il faut meme si le conteneur est arrete le supprimer avant de supprimer l'image
car le conteneur meme inactif utilise l'image.

Wordpress c'est juste des fichiers pas un service. Donc on ne peut pas lancer wordpress.

docker run -it: Lance le contenu du conteneur dans un shell
docker run -it bash: Commande bash remplace la CMD de mon dockerfile du coup
si ma CMD ne fonctionne pas il lance quand meme le bash.


Port 80: port par defaut du protocole HTTP. 
Port 443: port par defaut HTTPS

Docker run -p [hostPort]:[containerPort] id
http://localhost:hostPort

LAUNCH:
docker run -p 8080:81 ok
Probleme de connexion au port car rien ai lance sur le port 8080:
	```
	docker exec -ti id bash
		apt-get install net-tools
		netstat -anpe | grep 80
	```
	On accede au bash du conteneur et on install un outil
	pour pouvoir voir les ports et leurs utilisations.
	netsat -anpe montre tous les ports et leurs utilisations
	du coup pour le moment le port 80 est inutilise d'ou le fait
	que rien ne se lance lorsque l'on va sur la page web: 
	localhost:8080.

	Pour pouvoir lancer notre wordpress, il faut lancer
	apache2 qui est installe par defaut et changer la root des 
	fichiers d'apache2 vers notre dossier /var/www/html/ qui contient
	tous les fichiers de wordpress. 
	Dans ce cas la, pour le moment lorsque l'on va sur la page web
	du localhost au port 8080, le port est utilise mais n'affiche 
	que la page par defaut d'apache2.

	Pour resoudre ca, dans le dockerfile on supprime le fichier index.html
	dans /var/www/html avant de telecharger wordpress car wordpress n'a pas
	d'index.html mais un index.php du coup il ne reecrira pas dessus et l'index.html
	contient la page par defaut apache2.




							STEP 2:

La Prochaine Etape:
	Faire mariadb. 
- Install mariadb.
- Regarder commandes mariadb - mysql.
- Reflechir a comment ajouter un user, ajouter une database et comment lui donner tous les droits sur la database
avec les commandes sql.
Creer une database et la relie a un user/password host.
Trouver comment daemon off mysql.
- Reflechir a comment ajouter ce que j ai fait dans les commandes du bash du conteneur en sql pour les mettre dans un fichier ou autre.
- Comment connecter db et wordpress?
- mysql_secure_installation


Prochaines Etapes:
						mysql / mysql -u root (ne doit pas marcher)
						mysql -u root -p
						mysql -u user -p
- Ca fonctionne de se connecter avec root : OK
- Faire en sorte que je puisse pas me connecter a mysql sans user ou root (juste "mysql").
- Lie au pb du dessus surement mais je dois forcement passer par le mdp pour me connecter
a root ou user. Exemple: mysql -u root ne doit pas fonctionner il faut mysql -u root -p (car le -p propose le mdp).
- Faire en sorte que je puisse me connecter avec le user.
- Regler pb de timeout de mysql, qui s'arrete au bout de quelques secondes.

						Publish sur le port 443:443
						https://localhost : advertisement for autosigned certificat
- Configurer nginx avec https : certificat auto signe etc.

						Pour tester wordpress, bien publish sur le port 8080:80 
						(80 car wordpress tourne grace a apache pour le moment 
						qui est sur le port 80(port HTTP par defaut)) 
						Connection a la base de donnee grace au docker network 
						et au fait qu on indique dans le fichier de config de 
						wordpress ou il doit se connecter pour se connecter a 
						la base de donnee (donc 3306, avec aussi le host-name: 
						mariadb, le user et le mdp)
						Ne dois plus afficher la configuration de la base de 
						donnees lors de la creation du site.
- Lier worpress a la database avec le fichier wp-config.php (cote wordpress). 
Dire a wordpress ou aller chercher 
la database. 

						SHOW DATABASE
						Verifier avec des fausses connections et fausses databases et si il y a erreur c'est que ca fonctionne.
						Connection user
- Faire fonctionner avec le .env. Pour wordpress, dans le fichier /etc/php/7.3/fpm/pool.d/www.conf => Ligne avec ecrit "; clear _env = no" => Enlever le ";". Car ; = un commentaire donc on l'enleve pour eviter qu'il clear l'environnement.
A faire dans le conteneur donc soit en copiant le fichier avec le ; en moins soit en faisant une commande Sed.

- Lier nginx a wordpress et aussi son volume(dans docker-compose). Grace a php-fpm on peut lier les deux.
Comment mettre un cgi a php?

- Faire /etc/hosts et dans nginx fichier de configuration. (en local non? pas dans le conteneur)
- Optimiser dockerfile.




- Creer un certificat SSL.
